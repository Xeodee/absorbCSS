child = require 'child_process'
fs = require 'fs'
class Deffer
        constructor : ->
                @_queue = []

        then : (fn)->
                @_queue.push fn
                this

        resolve : ->
                next = @_queue.shift()
                if next
                        next()
                        
install = (name, deffer, installed, isinstall)->
        taskname = if isinstall then 'install' else "uninstall"
        negate = ->
                if isinstall
                        installed.indexOf(name) is -1
                else
                        installed.indexOf(name) > -1

        if negate()
                child.exec "npm -g #{taskname} #{name}", (err, stdout, stderr) ->
                        if err
                                throw err
                        console.log "#{taskname} #{name} successed."
        else
                console.log "#{name} is already #{taskname}ed. skip #{name}."
        deffer.resolve()

getOption = (option) ->
        if option is 'release' or option is 'debug'
                option
        else
                'release'

option '-m', '--mode [MODE*]', '[build,watch/require] Select compilation mode. one of [release|debug]'
option '-t', '--target [TARGET*]', '[build/require] Specify a regular expression, to build javascript files which matched with.'
option '-o', '--option [OPTIONS*]', '[build/option] Specify compilation options, this merged with the build.json options.'

task 'watch', 'Watch and compile. (ex. cake -m release watch)', (option)->
        option = getOption option.mode[0]
        {compressor} = require './lib/compressor'
        compressor.run(option)
        
task 'build', 'build javascript. (ex. cake -m release -t foo.bar.js build)', (opt)->
        {mode : [mode], target : [target], option} = opt
        mode = getOption mode
        {compressor} = require './lib/compressor'
        compressor.build(mode, target, option)

task 'install', 'Install all depends modules. (ex. cake install)', ->
        deffer = new Deffer
        depends = fs.readFileSync 'misc/deps.json', 'utf-8'
        depends = JSON.parse depends
        child.exec "npm -g ls", (err, stdout, stderr) ->
                for key, value of depends
                        if value is '*'
                                deffer
                                .then(install.bind(null, key, deffer, stdout, yes))
                        else
                                deffer
                                .then(install.bind(null, "#{key}@#{value}", deffer, stdout, yes))
                deffer.resolve()

task 'uninstall', 'uninstall all depends modules. (ex. cake uninstall)', ->
        deffer = new Deffer
        depends = fs.readFileSync 'misc/deps.json', 'utf-8'
        depends = JSON.parse depends
        child.exec "npm -g ls", (err, stdout, stderr) ->
                for key, value of depends
                        deffer
                        .then(install.bind(null, key, deffer, stdout, no))
                deffer.resolve()
                        