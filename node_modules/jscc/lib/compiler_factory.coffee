fs = require 'fs'
path = require 'path'
child = require 'child_process'
{uglify, parser} = require 'uglify-js'
{log} = require './logger'
uneval = require 'tosource'

clone = (obj, result = {}) ->
        for k, v of obj
                if Object.prototype.toString.call(v) is '[object Object]'
                        result[k] = {}
                        clone v, result[k]
                else
                        result[k] = v
        result

merge = (dest, source) ->
        for k, v of source
                if Object.prototype.toString.call(v) is '[object Object]'
                        if not dest[k]
                                dest[k] = {}
                        merge dest[k], v
                else 
                        dest[k] = v
        dest

class CompilerInterface
        constructor : (@_name, @_compilationInfo, @_writer) ->
                @_result = []
                
        compile : ->null

        setOptions : ->
                options = @_compilationInfo.options()
                global = @_compilationInfo.globalOptions()
                if global
                        @_options = merge clone(global[@_name] ? {}), options[@_name] ? {}
                else
                        @_options = options[@_name] ? {}

        name : -> @_name

class UglifyInterface extends CompilerInterface
        constructor : (args...) ->
                super args...
                @setOptions()

        compile : ->
                log uneval(@_options), "Compile begin."
                for filename in @_compilationInfo.depends()
                        content = fs.readFileSync filename, 'utf-8'
                        ignored = @_compilationInfo.ignored()
                        if not ignored[filename]
                                ast = parser.parse content
                                if @_options.mangle
                                        ast = uglify.ast_mangle ast
                                if @_options.squeeze
                                        ast = uglify.ast_squeeze ast
                                @_result.push uglify.gen_code(ast, @_options)
                        else
                                @_result.push content
                @_writer @_result.join(';')


class ClosureInterface extends CompilerInterface
        @_TMP_1 = '.tmp_closure.js'
        constructor : (args...) ->
                super args...
                @setOptions()
                @_ignored = @_compilationInfo.ignored()
                @_outdir = path.dirname @_compilationInfo.output()

        compile : ->
                for filename in @_compilationInfo.depends()
                        rel = path.relative @_outdir, path.dirname filename
                        if rel
                                @_result.push("--js #{rel}/" + path.basename filename)
                        else
                                @_result.push("--js ./" + path.basename filename)
                all = @_result.join(' ')
                @_spawn all

        _spawn : (all)->
                args = @_createClosureOptions @_compilationInfo.target(), all
                log(@_compilationInfo.target(), "Compile begin.")
                targetDir = path.dirname @_compilationInfo.output()
                child.exec args,
                        cwd : targetDir
                        env : process.env, (error, stdout, stderr) =>
                                try
                                        if error
                                                throw new Error(error)
                                        console.log stdout
                                        console.log stderr.replace(/(WARNING|ERROR)/g, '$1'.red).replace(/(warning\(s\)|error\(s\))/g, '$1'.yellow)
                                        content = fs.readFileSync "#{targetDir}/#{ClosureInterface._TMP_1}", 'utf-8'
                                        basename = path.basename @_compilationInfo.output()
                                        @_writer "#{content}//@ sourceMappingURL=./#{basename}.map", stderr.match(/([\d]+) warning\(s\)/), stderr.match(/([\d]+) error\(s\)/)
                                catch e
                                        log e.message, 'Compile Error.'
                                finally
                                        if fs.existsSync "#{targetDir}/#{ClosureInterface._TMP_1}"
                                                fs.unlinkSync "#{targetDir}/#{ClosureInterface._TMP_1}"                           

        _createClosureOptions : (target, all) ->
                realpath = path.dirname(fs.realpathSync "#{__filename}/../")
                relpath = path.relative realpath, target
                closurePath = fs.realpathSync("#{realpath}/closure-compiler/compiler.jar").replace(/\\/g, '/')
                javabin = if process.env.JAVA_HOME then "\"#{process.env.JAVA_HOME.replace(/\\/g, '/')}/java\"" else 'java'
                base = "#{javabin} -jar \"#{closurePath}\" #{all} --js_output_file #{ClosureInterface._TMP_1}"
                if @_options.jscompWarnings
                        if Array.isArray @_options.jscompWarnings
                                for item in @_options.jscompWarnings
                                        base += " --jscomp_warning #{item}"
                if @_options.jscompOff
                        if Array.isArray @_options.jscompOff
                                for item in @_options.jscompOff
                                        base += " --jscomp_off #{item}"
                if @_options.debug
                        base += " --debug"

                if @_options.outputWrapper
                        base += " --output_wrapper \"#{@_options.outputWrapper}\""
                
                if @_options.compilationLevel
                        base += " --compilation_level #{@_options.compilationLevel}"
                        if @_options.compilationLevel isnt 'WHITESPACE_ONLY'
                                base += " --define \"GOOG=true\""
                        if @_options.compilationLevel is 'ADVANCED_OPTIMIZATIONS' and not @_options.debug
                                base += " --define \"DEBUG=false\""

                if @_options.processJqueryPrimitives
                        base += " --process_jquery_primitives"

                if @_options.useTypesForOptimization
                        base += " --use_types_for_optimization"
                        
                if @_options.sourceMap
                        base += " --create_source_map \"#{@_compilationInfo.output()}.map\" --source_map_format=V3"
                if @_options.prettyPrint
                        base += " --formatting pretty_print"
                if @_options.externs
                        if Array.isArray @_options.externs
                                for extern in @_options.externs
                                        base += " --externs \"#{realpath}/misc/#{extern}\""
                base
                

class CompilerFactory
        @_COMPILER_LIST =
                uglify : UglifyInterface,
                closure : ClosureInterface

        @create : (args...) -> new CompilerFactory._COMPILER_LIST[args[0]](args...)

exports.CompilerFactory = CompilerFactory
exports.merge = merge

