fs = require('fs')
path = require('path')

class FileNotFoundException
        constructor : (message) ->
                @_message = message

        toString : ->
                message = @_message
                return "File #{message} is not found"

class Constant
        @REQUIRES : /.*?@requires\s+?([\w\.\/\-]+)/g
        

class ArrayIterator
        constructor : ->
                @_index = 0

        hasNext : ->
                @__iter__.length > @_index

        next : ->
                ret = @__iter__[@_index]
                @_index++
                ret

class File extends ArrayIterator
        constructor : (pathToJsFile, location) ->
                super()
                jspath = path.normalize fs.realpathSync(location + '/' + pathToJsFile)
                @_checkFileIsExist jspath
                @_path = jspath
                @_nextFilePaths = []
                @_location = path.dirname jspath
                @_checkDeps()
                @__iter__ = @_nextFilePaths

        currentFilePath : -> @_path

        currentLocation : -> @_location

        _checkDeps : ->
                content = fs.readFileSync @_path, 'utf-8'
                while match = Constant.REQUIRES.exec content
                        filename = match[1]
                        @_nextFilePaths.push filename
                        

        _checkFileIsExist: (pathToJsFile) ->
                stats = fs.statSync pathToJsFile
                if not stats.isFile pathToJsFile
                        throw new FileNotFoundException pathToJsFile


class DepsFinder extends ArrayIterator
        constructor : (pathToJsFile, location)->
                super()
                @_visited = {}
                @_visited[pathToJsFile] = 1
                @_pathList = []
                fl = new File pathToJsFile, location
                @_findAll fl, pathToJsFile, location
                @_pathList.push fl.currentFilePath()
                @__iter__ = @_pathList

        _findAll : (fl, pathToJsFile, location)->
                while fl.hasNext()
                        jspath = fl.next()
                        nextLoc = fl.currentLocation()
                        tmp = new File jspath, nextLoc
                        abspath = tmp.currentFilePath()
                        if not @_visited[abspath]
                                @_visited[abspath] = 1
                                @_findAll tmp, jspath, nextLoc
                                @_pathList.push abspath

        @search : (pathToJsFile, callback)->
                stats = fs.statSync pathToJsFile
                if stats.isFile pathToJsFile
                        realpath = fs.realpathSync pathToJsFile
                        depsFinder = new DepsFinder path.basename(realpath), path.dirname realpath
                        while depsFinder.hasNext()
                                callback depsFinder.next(), realpath
                else
                        console.error "#{pathToJsFile} no such file or directory."


exports.DepsFinder = DepsFinder
exports.ArrayIterator = ArrayIterator
