fs = require 'fs'
lastModefied = (filename) ->
        fs.statSync(filename).mtime

class CompilationInfo
        constructor : (mode, filename, target, options, depends, ignored, json) ->
                @_filename = filename
                @_target = target
                @_options = options[mode] ? {}
                @_depends = depends
                @_ignored = ignored
                @_json = json
                globalOptions = json.global ? {}
                @_globalOptions = globalOptions[mode] ? {}
                @_setCompilerName()
                @_output = if @_options.output then @_options.output else @_target.replace('.js', '-min.js')
                @_charset = if @_options.charset then @_options.charset else 'utf-8'
                @_deps = if @_options.deps then @_options.deps else globalOptions.deps ? undefined
                @_baseDir = if @_options.baseDir then @_options.baseDir else globalOptions.baseDir ? undefined
                @_depsFormatFile = if @_options.depsFormatFile then @_options.depsFormatFile else globalOptions.depsFormatFile ? undefined
                if @_depsFormatFile
                        @_depsFormat = fs.readFileSync(@_depsFormatFile, 'utf-8')
                else
                        @_depsFormat = if @_options.depsFormat then @_options.depsFormat else globalOptions.depsFormat ? undefined
                @_mtime = lastModefied filename

        filename : -> @_filename

        target : -> @_target

        compilerName : -> @_compilerName

        globalOptions : -> @_globalOptions

        options : -> @_options

        depends : -> @_depends

        ignored : -> @_ignored

        output : -> @_output

        charset : -> @_charset

        mtime : -> @_mtime

        update : ->
                @_mtime = lastModefied @_filename

        deps : ->
                @_deps

        baseDir : ->
                @_baseDir

        depsFormat : ->
                @_depsFormat

        depsFormatFile : ->
                @_depsFormatFile

        modefied : -> @_mtime.getTime() isnt lastModefied @_filename

        _setCompilerName : ->
                @_compilerName = @_options.compiler ? @_globalOptions.compiler
                if not @_compilerName
                        @_compilerName = "uglify"
                                

exports.CompilationInfo = CompilationInfo